#!/usr/bin/env python

import readline, getpass, sys, datetime, os, random, psycopg2
from psycopg2.pool import ThreadedConnectionPool

# Stoled from django.contrib.auth.models
def get_hexdigest(algorithm, salt, raw_password):
    """
    Returns a string of the hexdigest of the given plaintext password and salt
    using the given algorithm ('md5', 'sha1' or 'crypt').
    """
    if algorithm == 'crypt':
        try:
            import crypt
        except ImportError:
            raise ValueError('"crypt" password algorithm not supported in this environment')
        return crypt.crypt(raw_password, salt)
    # The rest of the supported algorithms are supported by hashlib, but
    # hashlib is only available in Python 2.5.
    try:
        import hashlib
    except ImportError:
        if algorithm == 'md5':
            import md5
            return md5.new(salt + raw_password).hexdigest()
        elif algorithm == 'sha1':
            import sha
            return sha.new(salt + raw_password).hexdigest()
    else:
        if algorithm == 'md5':
            return hashlib.md5(salt + raw_password).hexdigest()
        elif algorithm == 'sha1':
            return hashlib.sha1(salt + raw_password).hexdigest()
    raise ValueError("Got unknown password algorithm type in password.")

if __name__ == '__main__':
    argv = os.sys.argv

    if len(argv) > 1:
        if argv[1] in ('--help', '--usage', '-h'):
            print('Usage: %s [username]' % argv[0])
            sys.exit(0)
        username = argv[1]
    else:
        username = raw_input('Username: ')
    passwd = getpass.getpass('New password: ')
    passwd2 = getpass.getpass('Type your new password again: ')

    if passwd != passwd2:
        print 'Password mismatch, exiting...'
        sys.exit(1)

    algo = 'sha1'
    salt = get_hexdigest(algo, str(random.random()), str(random.random()))[:5]
    hsh = get_hexdigest(algo, salt, passwd)
    pwd = '%s$%s$%s' % (algo, salt, hsh)

    print "Updating..."
    conn = None
    conn_pool = None
    try:
        try:
            connector = "host=%s port=%d user=%s password=%s dbname=%s" % \
                ('localhost', 5432, 'webengine', 'webengine', 'rxtx')
            conn_pool = ThreadedConnectionPool(1, 200, connector)
            conn = conn_pool.getconn()
            cur = conn.cursor()
            query = "UPDATE webengine.auth_user SET password = '%s' WHERE username = '%s'" % (pwd, username)
            cur.execute(query)
            conn.commit()
        finally:
            conn_pool.putconn(conn)
    except Exception, e:
        if conn.closed != 1:
            conn.rollback()
        print "ERROR: " + str(e)
        sys.exit(1)

    print "Done."
