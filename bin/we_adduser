#!/usr/bin/env python

import readline, getpass, sys, datetime, os, random, psycopg2
from psycopg2.pool import ThreadedConnectionPool

# Stoled from django.contrib.auth.models
def get_hexdigest(algorithm, salt, raw_password):
    """
    Returns a string of the hexdigest of the given plaintext password and salt
    using the given algorithm ('md5', 'sha1' or 'crypt').
    """
    if algorithm == 'crypt':
        try:
            import crypt
        except ImportError:
            raise ValueError('"crypt" password algorithm not supported in this environment')
        return crypt.crypt(raw_password, salt)
    # The rest of the supported algorithms are supported by hashlib, but
    # hashlib is only available in Python 2.5.
    try:
        import hashlib
    except ImportError:
        if algorithm == 'md5':
            import md5
            return md5.new(salt + raw_password).hexdigest()
        elif algorithm == 'sha1':
            import sha
            return sha.new(salt + raw_password).hexdigest()
    else:
        if algorithm == 'md5':
            return hashlib.md5(salt + raw_password).hexdigest()
        elif algorithm == 'sha1':
            return hashlib.sha1(salt + raw_password).hexdigest()
    raise ValueError("Got unknown password algorithm type in password.")

FIELDS = ('username', 'first_name', 'last_name', 'email', 'password', 'is_staff', 'is_active', 'is_superuser', 'last_login', 'date_joined')

if __name__ == '__main__':
    argv = os.sys.argv

    if len(argv) > 1:
        username = argv[1]
    else:
        username = raw_input('Username: ')
    first_name = raw_input('First name: ')
    last_name = raw_input('Last name: ')
    email = raw_input('Email: ')
    date_joined = datetime.datetime.now()
    passwd = getpass.getpass()
    passwd2 = getpass.getpass('Type your password again: ')

    if passwd != passwd2:
        print 'Password mismatch, exiting...'
        sys.exit(1)

    confirm = raw_input('Confirm [Y/n]: ')
    if confirm not in ('y', 'yes', 'Y', 'Yes', 'YES', ''):
        print "Exiting..."
        sys.exit(1)

    algo = 'sha1'
    salt = get_hexdigest(algo, str(random.random()), str(random.random()))[:5]
    hsh = get_hexdigest(algo, salt, passwd)
    pwd = '%s$%s$%s' % (algo, salt, hsh)

    dic = dict(zip(FIELDS, (username, first_name, last_name, email, pwd, False, True, False, date_joined, date_joined)))

    print "Inserting..."
    conn = None
    conn_pool = None
    try:
        try:
            connector = "host=%s port=%d user=%s password=%s dbname=%s" % \
                ('localhost', 5432, 'webengine', 'webengine', 'rxtx')
            conn_pool = ThreadedConnectionPool(1, 200, connector)
            conn = conn_pool.getconn()
            cur = conn.cursor()
            query = "INSERT INTO webengine.auth_user (" + ','.join(FIELDS) + ") VALUES (" + ','.join(["%("+k+")s" for k in FIELDS]) + ")"
            cur.execute(query, dic)
            conn.commit()
        finally:
            conn_pool.putconn(conn)
    except Exception, e:
        if conn.closed != 1:
            conn.rollback()
        print "ERROR: " + str(e)
        sys.exit(1)

    print "Done."
