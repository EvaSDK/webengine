#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    A tool to list and modify webengine's user accounts.
"""

import os
import sys
import getpass
import datetime
import optparse

sys.path.append('/usr/share/webengine/app/')
sys.path.append('/usr/share/webengine/app/webengine/')

import sjconf
# Goddamn SJConf fucking up my sys.path
if '/var/lib/sjconf/plugins' in sys.path:
    sys.path.remove('/var/lib/sjconf/plugins')
os.environ['DJANGO_SETTINGS_MODULE'] = 'webengine.settings'

from django.core.exceptions import ObjectDoesNotExist
from django.contrib.auth.models import User

VERSION = "0.1.0"

def check_profile():
    """ Check profile is tvrbox enabled. """

    prof = sjconf.SJConf().profiles_infos(('tvrbox',))
    if prof['tvrbox'] == None:
        print "Not on a TVRBox, exiting…"
        sys.exit(0)

def main():
    """ Main function. """

    parser = optparse.OptionParser(
        version="%prog " + VERSION, option_list=[
            optparse.Option("-a", "--add",    dest="add",
                help="add the given user", metavar="username"),
            optparse.Option("-p", "--passwd", dest="passwd",
                help="change password of given user", metavar="username"),
            optparse.Option("-r", "--remove", dest="remove",
                help="remove the given user", metavar="username"),
            optparse.Option("-l", "--list",   dest="list",
                help="list users",   action="store_true",
                default=False),
            ])
    (options, _args) = parser.parse_args()

    if options.list:
        for user in User.objects.all():
            extra = []
            if user.is_staff:
                extra.append('staff')
            if user.is_superuser:
                extra.append('superuser')
            print '%2d. %8s %s <%s> (%s)' % (
                user.id, user.username, user.get_full_name(), user.email,
                ', '.join(extra))
    elif options.remove:
        try:
            user = User.objects.get(username=options.remove)
        except ObjectDoesNotExist:
            print "User", options.remove, "does not exist"
            sys.exit(1)

        print 'Removing', user.username
        user.delete()
    elif options.add:

        user = User()
        user.username = options.add
        try:
            user.first_name = raw_input('First name: ')
            user.last_name = raw_input('Last name: ')
            user.email = raw_input('Email: ')
            user.date_joined = datetime.datetime.now()
            passwd = getpass.getpass()
            passwd2 = getpass.getpass('Type your password again: ')

            if passwd != passwd2:
                print 'Password mismatch, exiting…'
                del user
                sys.exit(1)

            user.set_password(passwd)
            user.save()

        except KeyboardInterrupt:
            print "Creation Aborted"

    elif options.passwd:

        try:
            user = User.objects.get(username=options.passwd)
        except ObjectDoesNotExist:
            print "User", options.passwd, "does not exist"
            sys.exit(1)

        try:
            passwd = getpass.getpass('New password: ')
            passwd2 = getpass.getpass('Type your new password again: ')

            if passwd != passwd2:
                print 'Password mismatch, exiting…'
                del user
                sys.exit(1)

            user.set_password(passwd)
            user.save()
        except KeyboardInterrupt:
            print "Password change aborted"

if __name__ == "__main__":
    check_profile()
    main()

